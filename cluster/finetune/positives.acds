1: {
package com.example.demo.controllers;

import com.example.demo.models.Product;
import com.example.demo.services.ProductService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/products")
public class ProductController {

    private final ProductService productService;

    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        Product product = productService.findProductById(id);
        return product != null ? ResponseEntity.ok(product) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product newProduct = productService.saveProduct(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(newProduct);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody Product productDetails) {
        Product updatedProduct = productService.updateProduct(id, productDetails);
        return ResponseEntity.ok(updatedProduct);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productService.getAllProducts();
        return ResponseEntity.ok(products);
    }
}
}
```[@]```
2: {
package com.example.demo.services;

import com.example.demo.models.Product;
import com.example.demo.repositories.ProductRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductService {

    private final ProductRepository productRepository;

    public ProductService(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    public Product findProductById(Long id) {
        return productRepository.findById(id).orElse(null);
    }

    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    public Product saveProduct(Product product) {
        return productRepository.save(product);
    }

    public Product updateProduct(Long id, Product productDetails) {
        Product existingProduct = findProductById(id);
        if (existingProduct != null) {
            existingProduct.setName(productDetails.getName());
            existingProduct.setPrice(productDetails.getPrice());
            return productRepository.save(existingProduct);
        }
        return null;
    }

    public void deleteProduct(Long id) {
        productRepository.deleteById(id);
    }
}
}
```[@]```
3: {
package com.example.demo.repositories;

import com.example.demo.models.Product;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {
    Optional<Product> findById(Long id);
}
}
```[@]```
4: {
package com.example.demo.transactions;

import java.math.BigDecimal;
import java.util.Date;

public class BankTransferTransaction {

    private String transferId;
    private String fromBankAccount;
    private String toBankAccount;
    private BigDecimal transferAmount;
    private Date transferDate;

    public BankTransferTransaction(String transferId, String fromBankAccount, String toBankAccount, BigDecimal transferAmount, Date transferDate) {
        this.transferId = transferId;
        this.fromBankAccount = fromBankAccount;
        this.toBankAccount = toBankAccount;
        this.transferAmount = transferAmount;
        this.transferDate = transferDate;
    }

    public String getTransferId() {
        return transferId;
    }

    public String getFromBankAccount() {
        return fromBankAccount;
    }

    public String getToBankAccount() {
        return toBankAccount;
    }

    public BigDecimal getTransferAmount() {
        return transferAmount;
    }

    public Date getTransferDate() {
        return transferDate;
    }
}
}
```[@]```
5: {
package com.example.demo.inventory;

public class WarehouseItem {

    private String warehouseItemId;
    private String warehouseItemName;
    private int stock;
    private double cost;

    public WarehouseItem(String warehouseItemId, String warehouseItemName, int stock, double cost) {
        this.warehouseItemId = warehouseItemId;
        this.warehouseItemName = warehouseItemName;
        this.stock = stock;
        this.cost = cost;
    }

    public String getWarehouseItemId() {
        return warehouseItemId;
    }

    public String getWarehouseItemName() {
        return warehouseItemName;
    }

    public int getStock() {
        return stock;
    }

    public double getCost() {
        return cost;
    }
}
}
```[@]```
6: {
package com.example.demo.ecommerce;

import java.util.List;

public class Order {

    private String orderId;
    private List<String> orderItems;
    private double totalAmount;

    public Order(String orderId, List<String> orderItems, double totalAmount) {
        this.orderId = orderId;
        this.orderItems = orderItems;
        this.totalAmount = totalAmount;
    }

    public String getOrderId() {
        return orderId;
    }

    public List<String> getOrderItems() {
        return orderItems;
    }

    public double getTotalAmount() {
        return totalAmount;
    }
}
}
```[@]```
7: {
package com.example.demo.auth;

public class AdminLogin {

    private String adminUsername;
    private String adminPassword;

    public AdminLogin(String adminUsername, String adminPassword) {
        this.adminUsername = adminUsername;
        this.adminPassword = adminPassword;
    }

    public String getAdminUsername() {
        return adminUsername;
    }

    public String getAdminPassword() {
        return adminPassword;
    }
}
}
```[@]```
8: {
package com.example.demo.socialmedia;

public class Comment {

    private String commentId;
    private String postId;
    private String userId;
    private String text;

    public Comment(String commentId, String postId, String userId, String text) {
        this.commentId = commentId;
        this.postId = postId;
        this.userId = userId;
        this.text = text;
    }

    public String getCommentId() {
        return commentId;
    }

    public String getPostId() {
        return postId;
    }

    public String getUserId() {
        return userId;
    }

    public String getText() {
        return text;
    }
}
}
```[@]```
9: {
package com.example.demo.education;

import java.util.List;

public class Module {

    private String moduleId;
    private String moduleName;
    private List<Lesson> lessons;

    public Module(String moduleId, String moduleName, List<Lesson> lessons) {
        this.moduleId = moduleId;
        this.moduleName = moduleName;
        this.lessons = lessons;
    }

    public String getModuleId() {
        return moduleId;
    }

    public String getModuleName() {
        return moduleName;
    }

    public List<Lesson> getLessons() {
        return lessons;
    }
}
}
```[@]```
10: {
package com.example.demo.notifications;

public class SMSNotification {

    private String phoneNumber;
    private String message;

    public SMSNotification(String phoneNumber, String message) {
        this.phoneNumber = phoneNumber;
        this.message = message;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getMessage() {
        return message;
    }
}
}
```[@]```
11: {
package com.example.demo.payments;

public class DebitCardPayment {

    private String debitCardNumber;
    private String holderName;
    private String expirationDate;
    private double amount;

    public DebitCardPayment(String debitCardNumber, String holderName, String expirationDate, double amount) {
        this.debitCardNumber = debitCardNumber;
        this.holderName = holderName;
        this.expirationDate = expirationDate;
        this.amount = amount;
    }

    public String getDebitCardNumber() {
        return debitCardNumber;
    }

    public String getHolderName() {
        return holderName;
    }

    public String getExpirationDate() {
        return expirationDate;
    }

    public double getAmount() {
        return amount;
    }
}
}
```[@]```
12: {
package com.example.demo.ecommerce;

public class Invoice {

    private String invoiceId;
    private String orderId;
    private double totalAmount;

    public Invoice(String invoiceId, String orderId, double totalAmount) {
        this.invoiceId = invoiceId;
        this.orderId = orderId;
        this.totalAmount = totalAmount;
    }

    public String getInvoiceId() {
        return invoiceId;
    }

    public String getOrderId() {
        return orderId;
    }

    public double getTotalAmount() {
        return totalAmount;
    }
}
}
```[@]```
13: {
package com.example.ecommerce.controller;

import com.example.ecommerce.dto.OrderDTO;
import com.example.ecommerce.dto.ProductDTO;
import com.example.ecommerce.exception.ResourceNotFoundException;
import com.example.ecommerce.model.Order;
import com.example.ecommerce.model.Product;
import com.example.ecommerce.service.OrderService;
import com.example.ecommerce.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/api/v1")
@Validated
public class EcommerceController {

    @Autowired
    private ProductService productService;

    @Autowired
    private OrderService orderService;

    @GetMapping("/products")
    public ResponseEntity<List<ProductDTO>> getAllProducts() {
        List<ProductDTO> products = productService.getAllProducts();
        return ResponseEntity.ok(products);
    }

    @GetMapping("/products/{id}")
    public ResponseEntity<ProductDTO> getProductById(@PathVariable Long id) throws ResourceNotFoundException {
        ProductDTO product = productService.getProductById(id);
        return ResponseEntity.ok(product);
    }

    @PostMapping("/products")
    public ResponseEntity<ProductDTO> createProduct(@Valid @RequestBody ProductDTO productDTO) {
        ProductDTO createdProduct = productService.createProduct(productDTO);
        return ResponseEntity.ok(createdProduct);
    }

    @PutMapping("/products/{id}")
    public ResponseEntity<ProductDTO> updateProduct(@PathVariable Long id, @Valid @RequestBody ProductDTO productDTO) throws ResourceNotFoundException {
        ProductDTO updatedProduct = productService.updateProduct(id, productDTO);
        return ResponseEntity.ok(updatedProduct);
    }

    @DeleteMapping("/products/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) throws ResourceNotFoundException {
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/orders")
    public ResponseEntity<List<OrderDTO>> getAllOrders() {
        List<OrderDTO> orders = orderService.getAllOrders();
        return ResponseEntity.ok(orders);
    }

    @GetMapping("/orders/{id}")
    public ResponseEntity<OrderDTO> getOrderById(@PathVariable Long id) throws ResourceNotFoundException {
        OrderDTO order = orderService.getOrderById(id);
        return ResponseEntity.ok(order);
    }

    @PostMapping("/orders")
    public ResponseEntity<OrderDTO> createOrder(@Valid @RequestBody OrderDTO orderDTO) {
        OrderDTO createdOrder = orderService.createOrder(orderDTO);
        return ResponseEntity.ok(createdOrder);
    }

    @PutMapping("/orders/{id}")
    public ResponseEntity<OrderDTO> updateOrder(@PathVariable Long id, @Valid @RequestBody OrderDTO orderDTO) throws ResourceNotFoundException {
        OrderDTO updatedOrder = orderService.updateOrder(id, orderDTO);
        return ResponseEntity.ok(updatedOrder);
    }

    @DeleteMapping("/orders/{id}")
    public ResponseEntity<Void> deleteOrder(@PathVariable Long id) throws ResourceNotFoundException {
        orderService.deleteOrder(id);
        return ResponseEntity.noContent().build();
    }
}
}
```[@]```
14: {
package com.ecommerce.orders.services;

import com.ecommerce.orders.models.Order;
import com.ecommerce.orders.repositories.OrderRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class OrderProcessingService {

    private final OrderRepository orderRepository;

    public OrderProcessingService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    public Order findOrderById(Long id) {
        return orderRepository.findById(id).orElse(null);
    }

    public List<Order> getOrdersByStatus(String status) {
        return orderRepository.findOrdersByStatus(status);
    }

    public Order saveOrder(Order order) {
        return orderRepository.save(order);
    }

    public Order updateOrder(Long id, Order orderDetails) {
        Order existingOrder = findOrderById(id);
        if (existingOrder != null) {
            existingOrder.setShippingAddress(orderDetails.getShippingAddress());
            existingOrder.setOrderStatus(orderDetails.getOrderStatus());
            return orderRepository.save(existingOrder);
        }
        return null;
    }

    public void cancelOrder(Long id) {
        Order order = findOrderById(id);
        if (order != null) {
            order.setOrderStatus("Cancelled");
            orderRepository.save(order);
        }
    }

    public void deleteOrder(Long id) {
        orderRepository.deleteById(id);
    }
}
}
```[@]```
15: {
package com.school.students.schedulers;

import com.school.students.services.StudentService;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class StudentTaskScheduler {

    private final StudentService studentService;

    public StudentTaskScheduler(StudentService studentService) {
        this.studentService = studentService;
    }

    @Scheduled(cron = "0 0 1 * * ?")
    public void refreshStudentRecords() {
        studentService.refreshAllStudentRecords();
    }

    @Scheduled(fixedRate = 7200000)
    public void generatePeriodicReports() {
        studentService.generateReports();
    }
}
}
```[@]```
16: {
package com.finance.accounts.repositories;

import com.finance.accounts.models.Account;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface AccountRepository extends JpaRepository<Account, Long> {

    @Query("SELECT a FROM Account a WHERE a.balance < :balance")
    List<Account> findAccountsByBalanceLessThan(@Param("balance") Double balance);

    @Query("SELECT a FROM Account a WHERE a.status = :status")
    List<Account> findAccountsByStatus(@Param("status") String status);
}
}
```[@]```
17: {
package com.marketplace.products.controllers;

import com.marketplace.products.models.Product;
import com.marketplace.products.services.ProductService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/products")
public class MarketplaceProductController {

    private final ProductService productService;

    public MarketplaceProductController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        Product product = productService.findProductById(id);
        return product != null ? ResponseEntity.ok(product) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product newProduct = productService.saveProduct(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(newProduct);
    }

    @PutMapping("/{id}/stock")
    public ResponseEntity<Product> updateProductStock(@PathVariable Long id, @RequestParam Integer newStock) {
        Product updatedProduct = productService.updateProductStock(id, newStock);
        return ResponseEntity.ok(updatedProduct);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productService.getAllProducts();
        return ResponseEntity.ok(products);
    }
}
}
```[@]```
18: {
package com.educational.books.services;

import com.educational.books.models.Book;
import com.educational.books.repositories.BookRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LibraryService {

    private final BookRepository bookRepository;

    public LibraryService(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    public Book findBookById(Long id) {
        return bookRepository.findById(id).orElse(null);
    }

    public List<Book> findBooksByTitle(String title) {
        return bookRepository.findBooksByTitle(title);
    }

    public Book saveBook(Book book) {
        return bookRepository.save(book);
    }

    public Book updateBook(Long id, Book bookDetails) {
        Book existingBook = findBookById(id);
        if (existingBook != null) {
            existingBook.setGenre(bookDetails.getGenre());
            existingBook.setPublisher(bookDetails.getPublisher());
            return bookRepository.save(existingBook);
        }
        return null;
    }

    public void deleteBook(Long id) {
        bookRepository.deleteById(id);
    }
}
}
```[@]```
19: {
package com.hr.employees.repositories;

import com.hr.employees.models.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @Query("SELECT e FROM Employee e WHERE e.jobTitle = :jobTitle")
    List<Employee> findEmployeesByJobTitle(@Param("jobTitle") String jobTitle);

    @Query("SELECT e FROM Employee e WHERE e.yearsOfExperience > :yearsOfExperience")
    List<Employee> findEmployeesByExperienceGreaterThan(@Param("yearsOfExperience") Integer yearsOfExperience);
}
}
```[@]```
20: {
package com.medical.patients.controllers;

import com.medical.patients.models.Patient;
import com.medical.patients.services.PatientService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/patients")
public class PatientRecordsController {

    private final PatientService patientService;

    public PatientRecordsController(PatientService patientService) {
        this.patientService = patientService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Patient> getPatient(@PathVariable Long id) {
        Patient patient = patientService.findPatientById(id);
        return patient != null ? ResponseEntity.ok(patient) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<Patient> createPatient(@RequestBody Patient patient) {
        Patient newPatient = patientService.savePatient(patient);
        return ResponseEntity.status(HttpStatus.CREATED).body(newPatient);
    }

    @PutMapping("/{id}/phone")
    public ResponseEntity<Patient> updatePatientPhone(@PathVariable Long id, @RequestParam String newPhone) {
        Patient updatedPatient = patientService.updatePatientPhone(id, newPhone);
        return ResponseEntity.ok(updatedPatient);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePatient(@PathVariable Long id) {
        patientService.deletePatient(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Patient>> getAllPatients() {
        List<Patient> patients = patientService.getAllPatients();
        return ResponseEntity.ok(patients);
    }
}
}
```[@]```
21: {
package com.onlineeducation.courses.repositories;

import com.onlineeducation.courses.models.Course;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CourseRepository extends JpaRepository<Course, Long> {

    @Query("SELECT c FROM Course c WHERE c.category = :category")
    List<Course> findCoursesByCategory(@Param("category") String category);

    @Query("SELECT c FROM Course c WHERE c.rating > :rating")
    List<Course> findCoursesByRatingGreaterThan(@Param("rating") Double rating);
}
}
```[@]```
22: {
package com.travelagency.bookings.services;

import com.travelagency.bookings.models.Booking;
import com.travelagency.bookings.repositories.BookingRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookingManagementService {

    private final BookingRepository bookingRepository;

    public BookingManagementService(BookingRepository bookingRepository) {
        this.bookingRepository = bookingRepository;
    }

    public Booking findBookingById(Long id) {
        return bookingRepository.findById(id).orElse(null);
    }

    public List<Booking> findBookingsByDestination(String destination) {
        return bookingRepository.findBookingsByDestination(destination);
    }

    public Booking saveBooking(Booking booking) {
        return bookingRepository.save(booking);
    }

    public Booking updateBooking(Long id, Booking bookingDetails) {
        Booking existingBooking = findBookingById(id);
        if (existingBooking != null) {
            existingBooking.setFlightDetails(bookingDetails.getFlightDetails());
            existingBooking.setHotelDetails(bookingDetails.getHotelDetails());
            return bookingRepository.save(existingBooking);
        }
        return null;
    }

    public void deleteBooking(Long id) {
        bookingRepository.deleteById(id);
    }
}
}
```[@]```
23: {
package com.fooddelivery.reservations.services;

import com.fooddelivery.reservations.models.Reservation;
import com.fooddelivery.reservations.repositories.ReservationRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ReservationManagementService {

    private final ReservationRepository reservationRepository;

    public ReservationManagementService(ReservationRepository reservationRepository) {
        this.reservationRepository = reservationRepository;
    }

    public Reservation findReservationById(Long id) {
        return reservationRepository.findById(id).orElse(null);
    }

    public List<Reservation> findReservationsByDate(String date) {
        return reservationRepository.findReservationsByDate(date);
    }

    public Reservation saveReservation(Reservation reservation) {
        return reservationRepository.save(reservation);
    }

    public Reservation updateReservation(Long id, Reservation reservationDetails) {
        Reservation existingReservation = findReservationById(id);
        if (existingReservation != null) {
            existingReservation.setCustomerName(reservationDetails.getCustomerName());
            existingReservation.setCustomerEmail(reservationDetails.getCustomerEmail());
            return reservationRepository.save(existingReservation);
        }
        return null;
    }

    public void deleteReservation(Long id) {
        reservationRepository.deleteById(id);
    }
}
}
```[@]```
24: {
package com.banking.loans.repositories;

import com.banking.loans.models.Loan;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface LoanRepository extends JpaRepository<Loan, Long> {

    @Query("SELECT l FROM Loan l WHERE l.term < :term")
    List<Loan> findLoansByTermLessThan(@Param("term") Integer term);

    @Query("SELECT l FROM Loan l WHERE l.borrower = :borrower")
    List<Loan> findLoansByBorrower(@Param("borrower") String borrower);
}
}
```[@]```
25: {
package com.shippingcompany.shipments.schedulers;

import com.shippingcompany.shipments.services.ShipmentService;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ShipmentStatusScheduler {

    private final ShipmentService shipmentService;

    public ShipmentStatusScheduler(ShipmentService shipmentService) {
        this.shipmentService = shipmentService;
    }

    @Scheduled(cron = "0 0 3 * * ?")
    public void refreshShipmentStatuses() {
        shipmentService.refreshAllShipmentStatuses();
    }

    @Scheduled(fixedRate = 180000)
    public void notifyShipmentUpdates() {
        shipmentService.notifyShipmentUpdates();
    }
}
}
```[@]```
26: {
package com.techsupport.tickets.services;

import com.techsupport.tickets.models.Ticket;
import com.techsupport.tickets.repositories.TicketRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TicketManagementService {

    private final TicketRepository ticketRepository;

    public TicketManagementService(TicketRepository ticketRepository) {
        this.ticketRepository = ticketRepository;
    }

    public Ticket findTicketById(Long id) {
        return ticketRepository.findById(id).orElse(null);
    }

    public List<Ticket> findTicketsByPriority(String priority) {
        return ticketRepository.findTicketsByPriority(priority);
    }

    public Ticket saveTicket(Ticket ticket) {
        return ticketRepository.save(ticket);
    }

    public Ticket updateTicket(Long id, Ticket ticketDetails) {
        Ticket existingTicket = findTicketById(id);
        if (existingTicket != null) {
            existingTicket.setAssignedTo(ticketDetails.getAssignedTo());
            existingTicket.setDescription(ticketDetails.getDescription());
            return ticketRepository.save(existingTicket);
        }
        return null;
    }

    public void deleteTicket(Long id) {
        ticketRepository.deleteById(id);
    }
}
}