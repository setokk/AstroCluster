1: {
package com.example.demo.controllers;

import com.example.demo.models.User;
import com.example.demo.services.UserService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable Long id) {
        User user = userService.findUserById(id);
        return user != null ? ResponseEntity.ok(user) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User newUser = userService.saveUser(user);
        return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User userDetails) {
        User updatedUser = userService.updateUser(id, userDetails);
        return ResponseEntity.ok(updatedUser);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }
}
}
```[@]```
2: {
package com.example.demo.services;

import com.example.demo.models.User;
import com.example.demo.repositories.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User findUserById(Long id) {
        return userRepository.findById(id).orElse(null);
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User saveUser(User user) {
        return userRepository.save(user);
    }

    public User updateUser(Long id, User userDetails) {
        User existingUser = findUserById(id);
        if (existingUser != null) {
            existingUser.setName(userDetails.getName());
            return userRepository.save(existingUser);
        }
        return null;
    }

    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }
}
}
```[@]```
3: {
package com.example.demo.repositories;

import com.example.demo.models.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}
}
```[@]```
4: {
package com.example.demo.transactions;

import java.math.BigDecimal;
import java.util.Date;

public class PaymentTransaction {

    private String transactionId;
    private String senderAccountId;
    private String receiverAccountId;
    private BigDecimal amount;
    private Date transactionDate;

    public PaymentTransaction(String transactionId, String senderAccountId, String receiverAccountId, BigDecimal amount, Date transactionDate) {
        this.transactionId = transactionId;
        this.senderAccountId = senderAccountId;
        this.receiverAccountId = receiverAccountId;
        this.amount = amount;
        this.transactionDate = transactionDate;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public String getSenderAccountId() {
        return senderAccountId;
    }

    public String getReceiverAccountId() {
        return receiverAccountId;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public Date getTransactionDate() {
        return transactionDate;
    }
}
}
```[@]```
5: {
package com.example.demo.inventory;

public class InventoryItem {

    private String itemId;
    private String itemName;
    private int quantity;
    private double price;

    public InventoryItem(String itemId, String itemName, int quantity, double price) {
        this.itemId = itemId;
        this.itemName = itemName;
        this.quantity = quantity;
        this.price = price;
    }

    public String getItemId() {
        return itemId;
    }

    public String getItemName() {
        return itemName;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }
}
}
```[@]```
6: {
package com.example.demo.ecommerce;

import java.util.ArrayList;
import java.util.List;

public class ShoppingCart {

    private String cartId;
    private List<String> items;
    private double total;

    public ShoppingCart(String cartId) {
        this.cartId = cartId;
        this.items = new ArrayList<>();
        this.total = 0.0;
    }

    public void addItem(String item) {
        items.add(item);
    }

    public void removeItem(String item) {
        items.remove(item);
    }

    public List<String> getItems() {
        return items;
    }

    public double getTotal() {
        return total;
    }

    public void calculateTotal(double itemPrice) {
        total += itemPrice;
    }
}
}
```[@]```
7: {
package com.example.demo.auth;

public class UserLogin {

    private String username;
    private String password;

    public UserLogin(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
}
}
```[@]```
8: {
package com.example.demo.socialmedia;

public class TextPost {

    private String postId;
    private String userId;
    private String content;

    public TextPost(String postId, String userId, String content) {
        this.postId = postId;
        this.userId = userId;
        this.content = content;
    }

    public String getPostId() {
        return postId;
    }

    public String getUserId() {
        return userId;
    }

    public String getContent() {
        return content;
    }
}
}
```[@]```
9: {
package com.example.demo.education;

public class Lesson {

    private String lessonId;
    private String lessonTitle;
    private String content;

    public Lesson(String lessonId, String lessonTitle, String content) {
        this.lessonId = lessonId;
        this.lessonTitle = lessonTitle;
        this.content = content;
    }

    public String getLessonId() {
        return lessonId;
    }

    public String getLessonTitle() {
        return lessonTitle;
    }

    public String getContent() {
        return content;
    }
}
}
```[@]```
10: {
package com.example.demo.notifications;

public class EmailNotification {

    private String email;
    private String subject;
    private String message;

    public EmailNotification(String email, String subject, String message) {
        this.email = email;
        this.subject = subject;
        this.message = message;
    }

    public String getEmail() {
        return email;
    }

    public String getSubject() {
        return subject;
    }

    public String getMessage() {
        return message;
    }
}
}
```[@]```
11: {
package com.example.demo.payments;

public class CreditCardPayment {

    private String cardNumber;
    private String cardHolderName;
    private String expirationDate;
    private double amount;

    public CreditCardPayment(String cardNumber, String cardHolderName, String expirationDate, double amount) {
        this.cardNumber = cardNumber;
        this.cardHolderName = cardHolderName;
        this.expirationDate = expirationDate;
        this.amount = amount;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public String getCardHolderName() {
        return cardHolderName;
    }

    public String getExpirationDate() {
        return expirationDate;
    }

    public double getAmount() {
        return amount;
    }
}
}
```[@]```
12: {
package com.example.demo.ecommerce;

public class Order {

    private String orderId;
    private String productId;
    private int quantity;

    public Order(String orderId, String productId, int quantity) {
        this.orderId = orderId;
        this.productId = productId;
        this.quantity = quantity;
    }

    public String getOrderId() {
        return orderId;
    }

    public String getProductId() {
        return productId;
    }

    public int getQuantity() {
        return quantity;
    }
}
}
```[@]```
13: {
package edu.setokk.atm.user;

import edu.setokk.atm.auth.JwtUtils;
import edu.setokk.atm.user.request.LoginRequest;
import edu.setokk.atm.user.request.RegisterRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;

@RestController
@RequestMapping("/api/users")
public class UserController {
    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@RequestBody @Valid LoginRequest loginRequest) {
        String username = loginRequest.getUsername();
        String password = loginRequest.getPassword();

        User user = userService.loginUser(username, password);

        // Generate JWT Token
        return ResponseEntity.ok(JwtUtils.generateJWT(user));
    }

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody @Valid
                                          RegisterRequest registerRequest) {
        String username = registerRequest.getUsername();
        String password = registerRequest.getPassword();
        String email = registerRequest.getEmail();

        User user = userService.registerUser(username, password, email);

        // Generate JWT Token
        return ResponseEntity.ok(JwtUtils.generateJWT(user));
    }

    @GetMapping("/deposit")
    public ResponseEntity<?> depositAmount(@RequestParam("amount") @Positive BigDecimal amount) {
        User authUser = getAuthenticatedUser();
        if (authUser == null)
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);

        userService.deposit(authUser, amount);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @GetMapping("/withdraw")
    public ResponseEntity<?> withdrawAmount(@RequestParam("amount") @Positive BigDecimal amount) {
        User authUser = getAuthenticatedUser();
        System.out.println(authUser);
        if (authUser == null)
            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);

        userService.withdraw(authUser, amount);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    private User getAuthenticatedUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !(authentication.getPrincipal() instanceof User))
            return null;

        return (User) authentication.getPrincipal();
    }
}
}
```[@]```
14: {
package com.shop.orders.services;

import com.shop.orders.models.Order;
import com.shop.orders.repositories.OrderRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class OrderService {

    private final OrderRepository orderRepository;

    public OrderService(OrderRepository orderRepository) {
        this.orderRepository = orderRepository;
    }

    public Order findOrderById(Long id) {
        return orderRepository.findById(id).orElse(null);
    }

    public List<Order> getOrdersByCustomerId(Long customerId) {
        return orderRepository.findOrdersByCustomerId(customerId);
    }

    public Order saveOrder(Order order) {
        return orderRepository.save(order);
    }

    public Order updateOrder(Long id, Order orderDetails) {
        Order existingOrder = findOrderById(id);
        if (existingOrder != null) {
            existingOrder.setProduct(orderDetails.getProduct());
            existingOrder.setQuantity(orderDetails.getQuantity());
            return orderRepository.save(existingOrder);
        }
        return null;
    }

    public void deleteOrder(Long id) {
        orderRepository.deleteById(id);
    }
}
}
```[@]```
15: {
package com.university.students.schedulers;

import com.university.students.services.StudentService;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class StudentScheduler {

    private final StudentService studentService;

    public StudentScheduler(StudentService studentService) {
        this.studentService = studentService;
    }

    @Scheduled(cron = "0 0 0 * * ?")
    public void updateStudentStatuses() {
        studentService.updateAllStudentStatuses();
    }

    @Scheduled(fixedRate = 60000)
    public void sendDailyReports() {
        studentService.sendDailyReports();
    }
}
}
```[@]```
16: {
package com.bank.accounts.repositories;

import com.bank.accounts.models.Account;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface AccountRepository extends JpaRepository<Account, Long> {

    @Query("SELECT a FROM Account a WHERE a.balance > :balance")
    List<Account> findAccountsByBalanceGreaterThan(@Param("balance") Double balance);

    @Query("SELECT a FROM Account a WHERE a.accountType = :accountType")
    List<Account> findAccountsByAccountType(@Param("accountType") String accountType);
}
}
```[@]```
17: {
package com.store.products.controllers;

import com.store.products.models.Product;
import com.store.products.services.ProductService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/products")
public class ProductController {

    private final ProductService productService;

    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProduct(@PathVariable Long id) {
        Product product = productService.findProductById(id);
        return product != null ? ResponseEntity.ok(product) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<Product> createProduct(@RequestBody Product product) {
        Product newProduct = productService.saveProduct(product);
        return ResponseEntity.status(HttpStatus.CREATED).body(newProduct);
    }

    @PutMapping("/{id}/price")
    public ResponseEntity<Product> updateProductPrice(@PathVariable Long id, @RequestParam Double newPrice) {
        Product updatedProduct = productService.updateProductPrice(id, newPrice);
        return ResponseEntity.ok(updatedProduct);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Product>> getAllProducts() {
        List<Product> products = productService.getAllProducts();
        return ResponseEntity.ok(products);
    }
}
}
```[@]```
18: {
package com.library.books.services;

import com.library.books.models.Book;
import com.library.books.repositories.BookRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookService {

    private final BookRepository bookRepository;

    public BookService(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }

    public Book findBookById(Long id) {
        return bookRepository.findById(id).orElse(null);
    }

    public List<Book> findBooksByAuthor(String author) {
        return bookRepository.findBooksByAuthor(author);
    }

    public Book saveBook(Book book) {
        return bookRepository.save(book);
    }

    public Book updateBook(Long id, Book bookDetails) {
        Book existingBook = findBookById(id);
        if (existingBook != null) {
            existingBook.setTitle(bookDetails.getTitle());
            existingBook.setAuthor(bookDetails.getAuthor());
            return bookRepository.save(existingBook);
        }
        return null;
    }

    public void deleteBook(Long id) {
        bookRepository.deleteById(id);
    }
}
}
```[@]```
19: {
package com.company.employees.repositories;

import com.company.employees.models.Employee;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    @Query("SELECT e FROM Employee e WHERE e.department = :department")
    List<Employee> findEmployeesByDepartment(@Param("department") String department);

    @Query("SELECT e FROM Employee e WHERE e.salary > :salary")
    List<Employee> findEmployeesBySalaryGreaterThan(@Param("salary") Double salary);
}
}
```[@]```
20: {
package com.healthcare.patients.controllers;

import com.healthcare.patients.models.Patient;
import com.healthcare.patients.services.PatientService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/patients")
public class PatientController {

    private final PatientService patientService;

    public PatientController(PatientService patientService) {
        this.patientService = patientService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Patient> getPatient(@PathVariable Long id) {
        Patient patient = patientService.findPatientById(id);
        return patient != null ? ResponseEntity.ok(patient) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<Patient> createPatient(@RequestBody Patient patient) {
        Patient newPatient = patientService.savePatient(patient);
        return ResponseEntity.status(HttpStatus.CREATED).body(newPatient);
    }

    @PutMapping("/{id}/address")
    public ResponseEntity<Patient> updatePatientAddress(@PathVariable Long id, @RequestParam String newAddress) {
        Patient updatedPatient = patientService.updatePatientAddress(id, newAddress);
        return ResponseEntity.ok(updatedPatient);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePatient(@PathVariable Long id) {
        patientService.deletePatient(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Patient>> getAllPatients() {
        List<Patient> patients = patientService.getAllPatients();
        return ResponseEntity.ok(patients);
    }
}
}
```[@]```
21: {
package com.education.courses.repositories;

import com.education.courses.models.Course;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CourseRepository extends JpaRepository<Course, Long> {

    @Query("SELECT c FROM Course c WHERE c.instructor = :instructor")
    List<Course> findCoursesByInstructor(@Param("instructor") String instructor);

    @Query("SELECT c FROM Course c WHERE c.duration > :duration")
    List<Course> findCoursesByDurationGreaterThan(@Param("duration") Integer duration);
}
}
```[@]```
22: {
package com.travel.bookings.services;

import com.travel.bookings.models.Booking;
import com.travel.bookings.repositories.BookingRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookingService {

    private final BookingRepository bookingRepository;

    public BookingService(BookingRepository bookingRepository) {
        this.bookingRepository = bookingRepository;
    }

    public Booking findBookingById(Long id) {
        return bookingRepository.findById(id).orElse(null);
    }

    public List<Booking> findBookingsByCustomerId(Long customerId) {
        return bookingRepository.findBookingsByCustomerId(customerId);
    }

    public Booking saveBooking(Booking booking) {
        return bookingRepository.save(booking);
    }

    public Booking updateBooking(Long id, Booking bookingDetails) {
        Booking existingBooking = findBookingById(id);
        if (existingBooking != null) {
            existingBooking.setHotelName(bookingDetails.getHotelName());
            existingBooking.setCheckInDate(bookingDetails.getCheckInDate());
            return bookingRepository.save(existingBooking);
        }
        return null;
    }

    public void deleteBooking(Long id) {
        bookingRepository.deleteById(id);
    }
}
}
```[@]```
23: {
package com.restaurant.reservations.services;

import com.restaurant.reservations.models.Reservation;
import com.restaurant.reservations.repositories.ReservationRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ReservationService {

    private final ReservationRepository reservationRepository;

    public ReservationService(ReservationRepository reservationRepository) {
        this.reservationRepository = reservationRepository;
    }

    public Reservation findReservationById(Long id) {
        return reservationRepository.findById(id).orElse(null);
    }

    public List<Reservation> findReservationsByCustomerId(Long customerId) {
        return reservationRepository.findReservationsByCustomerId(customerId);
    }

    public Reservation saveReservation(Reservation reservation) {
        return reservationRepository.save(reservation);
    }

    public Reservation updateReservation(Long id, Reservation reservationDetails) {
        Reservation existingReservation = findReservationById(id);
        if (existingReservation != null) {
            existingReservation.setRestaurantName(reservationDetails.getRestaurantName());
            existingReservation.setReservationTime(reservationDetails.getReservationTime());
            return reservationRepository.save(existingReservation);
        }
        return null;
    }

    public void deleteReservation(Long id) {
        reservationRepository.deleteById(id);
    }
}
}
```[@]```
24: {
package com.finance.loans.repositories;

import com.finance.loans.models.Loan;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface LoanRepository extends JpaRepository<Loan, Long> {

    @Query("SELECT l FROM Loan l WHERE l.amount > :amount")
    List<Loan> findLoansByAmountGreaterThan(@Param("amount") Double amount);

    @Query("SELECT l FROM Loan l WHERE l.interestRate > :interestRate")
    List<Loan> findLoansByInterestRateGreaterThan(@Param("interestRate") Double interestRate);
}
}
```[@]```
25: {
package com.logistics.shipments.schedulers;

import com.logistics.shipments.services.ShipmentService;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ShipmentScheduler {

    private final ShipmentService shipmentService;

    public ShipmentScheduler(ShipmentService shipmentService) {
        this.shipmentService = shipmentService;
    }

    @Scheduled(cron = "0 0 2 * * ?")
    public void updateShipmentStatuses() {
        shipmentService.updateAllShipmentStatuses();
    }

    @Scheduled(fixedRate = 300000)
    public void sendShipmentNotifications() {
        shipmentService.sendShipmentNotifications();
    }
}
}
```[@]```
26: {
package com.techsupport.tickets.controllers;

import com.techsupport.tickets.models.Ticket;
import com.techsupport.tickets.services.TicketService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/tickets")
public class TicketController {

    private final TicketService ticketService;

    public TicketController(TicketService ticketService) {
        this.ticketService = ticketService;
    }

    @GetMapping("/{id}")
    public ResponseEntity<Ticket> getTicket(@PathVariable Long id) {
        Ticket ticket = ticketService.findTicketById(id);
        return ticket != null ? ResponseEntity.ok(ticket) : ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    @PostMapping
    public ResponseEntity<Ticket> createTicket(@RequestBody Ticket ticket) {
        Ticket newTicket = ticketService.saveTicket(ticket);
        return ResponseEntity.status(HttpStatus.CREATED).body(newTicket);
    }

    @PutMapping("/{id}/status")
    public ResponseEntity<Ticket> updateTicketStatus(@PathVariable Long id, @RequestParam String newStatus) {
        Ticket updatedTicket = ticketService.updateTicketStatus(id, newStatus);
        return ResponseEntity.ok(updatedTicket);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTicket(@PathVariable Long id) {
        ticketService.deleteTicket(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Ticket>> getAllTickets() {
        List<Ticket> tickets = ticketService.getAllTickets();
        return ResponseEntity.ok(tickets);
    }
}
}
```[@]```
27: {
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Service
public class PaymentService {

    @Autowired
    private RestTemplate restTemplate;

    private Map<String, Double> transactionDatabase = new HashMap<>();

    public boolean processPayment(String accountNumber, double amount) {
        if (!validatePaymentDetails(accountNumber, amount)) {
            return false;
        }

        try {
            boolean paymentSuccess = paymentGatewayProcess(accountNumber, amount);
            if (paymentSuccess) {
                String transactionId = UUID.randomUUID().toString();
                transactionDatabase.put(transactionId, amount);
                System.out.println("Payment processed successfully. Transaction ID: " + transactionId);
                return true;
            } else {
                System.out.println("Payment processing failed for account: " + accountNumber);
                return false;
            }
        } catch (Exception e) {
            System.out.println("Error processing payment: " + e.getMessage());
            return false;
        }
    }

    public boolean refundPayment(String transactionId, double amount) {
        if (!transactionDatabase.containsKey(transactionId)) {
            System.out.println("Invalid transaction ID: " + transactionId);
            return false;
        }

        double originalAmount = transactionDatabase.get(transactionId);
        if (amount > originalAmount) {
            System.out.println("Refund amount exceeds original transaction amount.");
            return false;
        }

        try {
            boolean refundSuccess = paymentGatewayRefund(transactionId, amount);
            if (refundSuccess) {
                transactionDatabase.put(transactionId, originalAmount - amount);
                System.out.println("Refund processed successfully for transaction ID: " + transactionId);
                return true;
            } else {
                System.out.println("Refund processing failed for transaction ID: " + transactionId);
                return false;
            }
        } catch (Exception e) {
            System.out.println("Error processing refund: " + e.getMessage());
            return false;
        }
    }

    public String generateInvoice(String transactionId) {
        if (!transactionDatabase.containsKey(transactionId)) {
            return "Invalid transaction ID: " + transactionId;
        }

        double amount = transactionDatabase.get(transactionId);
        String invoice = "Invoice\n";
        invoice += "Transaction ID: " + transactionId + "\n";
        invoice += "Amount: $" + amount + "\n";
        invoice += "Date: " + java.time.LocalDate.now() + "\n";
        invoice += "Thank you for your payment!";
        return invoice;
    }

    public boolean validatePaymentDetails(String accountNumber, double amount) {
        if (accountNumber == null || accountNumber.isEmpty()) {
            System.out.println("Invalid account number.");
            return false;
        }
        if (amount <= 0) {
            System.out.println("Invalid payment amount.");
            return false;
        }
        return true;
    }

    private boolean paymentGatewayProcess(String accountNumber, double amount) throws Exception {
        String url = "https://api.paymentgateway.com/process";
        HttpHeaders headers = new HttpHeaders();
        headers.set("Content-Type", "application/json");

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("accountNumber", accountNumber);
        requestBody.put("amount", amount);

        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            return true;
        } else {
            throw new Exception("Payment gateway error: " + response.getBody());
        }
    }

    private boolean paymentGatewayRefund(String transactionId, double amount) throws Exception {
        String url = "https://api.paymentgateway.com/refund";
        HttpHeaders headers = new HttpHeaders();
        headers.set("Content-Type", "application/json");

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("transactionId", transactionId);
        requestBody.put("amount", amount);

        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            return true;
        } else {
            throw new Exception("Payment gateway error: " + response.getBody());
        }
    }
}
}
